name: Deploy to Kubernetes

on:
  workflow_run:
    workflows: ["Build and Push Docker Image for WebGoat"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
    - uses: actions/checkout@v3

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H 20.63.16.243 >> ~/.ssh/known_hosts

    - name: Reset and Clean Kubernetes
      run: |
        ssh -i ~/.ssh/id_rsa azureuser@20.63.16.243 '
          sudo kubeadm reset -f || true
          sudo apt-get remove -y kubelet kubeadm kubectl
          sudo apt-get autoremove -y
          sudo rm -rf /etc/kubernetes/
          sudo rm -rf ~/.kube/
          sudo rm -f /etc/apt/sources.list.d/kubernetes.list
          sudo rm -f /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          sudo rm -f /etc/apt/sources.list.d/docker.list
          sudo rm -f /etc/apt/keyrings/docker.gpg
        '

    - name: Install Dependencies on VM
      run: |
          ssh -i ~/.ssh/id_rsa azureuser@20.63.16.243 '
            # Prepare directories for new keyrings
            sudo mkdir -p /etc/apt/keyrings
      
            # Clean existing Docker configurations
            sudo rm -f /etc/apt/sources.list.d/docker.list
            sudo rm -f /etc/apt/keyrings/docker.gpg
      
            # Add Docker apt repository
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg || true
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null || true
      
            # Add Kubernetes apt repository
            curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg || true
            echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list > /dev/null || true
      
            # Force update, ignore errors, and proceed
            sudo apt-get update -o Acquire::AllowReleaseInfoChange=true || true
      
            # Install required packages, continue even if partial errors occur
            sudo apt-get install -y apt-transport-https ca-certificates curl gpg || true
            sudo apt-get install -y kubelet kubeadm kubectl || true
            sudo apt-mark hold kubelet kubeadm kubectl || true
          '
      

    - name: Reset and Clean Kubernetes
      run: |
            ssh -i ~/.ssh/id_rsa azureuser@20.63.16.243 '
              echo "Stopping kubelet and cleaning up previous Kubernetes setup..."
        
              # Stop kubelet and container runtime
              sudo systemctl stop kubelet || true
              sudo systemctl stop containerd || true
        
              # Reset Kubernetes
              sudo kubeadm reset -f || true
        
              # Kill any remaining Kubernetes processes
              sudo pkill -f kube || true
        
              # Clean up Kubernetes manifests and configuration
              sudo rm -rf /etc/kubernetes/
              sudo rm -rf /var/lib/kubelet/*
              sudo rm -rf /var/lib/etcd/*
              sudo rm -rf ~/.kube/
        
              # Clean up ports
              sudo lsof -i :10250,10257,10259 | awk '\''NR>1 {print $2}'\'' | xargs -r sudo kill -9 || true
        
              echo "Kubernetes cleanup complete."
            '
        
    - name: Initialize Kubernetes Cluster
      run: |
            ssh -i ~/.ssh/id_rsa azureuser@20.63.16.243 '
              echo "Initializing Kubernetes cluster..."
        
              # Pre-pull required images
              sudo kubeadm config images pull
        
              # Run kubeadm init with ignored preflight errors (to avoid known conflicts)
              sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address=20.63.16.243 --ignore-preflight-errors=all
        
              # Configure kubectl for the user
              mkdir -p $HOME/.kube
              sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
              sudo chown $(id -u):$(id -g) $HOME/.kube/config
        
              # Remove the taint from the control-plane node
              kubectl taint nodes --all node-role.kubernetes.io/control-plane- || true
        
              echo "Kubernetes cluster initialized successfully."
            '
        
        
    - name: Install Calico Network Plugin
      run: |
        ssh -i ~/.ssh/id_rsa azureuser@20.63.16.243 '
          kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml
        '

    - name: Wait for Node Ready
      run: |
        ssh -i ~/.ssh/id_rsa azureuser@20.63.16.243 '
          for i in {1..30}; do
            if kubectl get nodes | grep -q "Ready"; then
              echo "Node is Ready"
              exit 0
            fi
            echo "Waiting for node to be ready... ($i/30)"
            sleep 10
          done
          exit 1
        '

    - name: Deploy Applications
      run: |
        ssh -i ~/.ssh/id_rsa azureuser@20.63.16.243 '
          cd ~/WebGoat
          git pull
          kubectl create namespace webgoat --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f kubernetes/prometheus/ -n monitoring
          kubectl apply -f kubernetes/grafana/ -n monitoring
          kubectl apply -f kubernetes/webgoat/ -n webgoat
        '
