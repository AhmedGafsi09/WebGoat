name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: ${{ github.workspace }}/kubeconfig

    steps:
      # 1. Récupération du code
      - uses: actions/checkout@v3

      # 2. Configuration du KUBECONFIG depuis un secret
      - name: Set KUBECONFIG
        run: |
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig
          chmod 600 kubeconfig
          kubectl get nodes

      # 3. Installation de Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # 4. Terraform init/plan/apply avec gestion d'erreurs
      - name: Terraform Init
        working-directory: ./infrastructure
        run: terraform init

      - name: Terraform Import Resources
        working-directory: ./infrastructure
        continue-on-error: true
        run: |
          terraform import kubernetes_namespace_v1.monitoring monitoring || true
          terraform import kubernetes_namespace_v1.webgoat webgoat || true
          terraform import kubernetes_deployment.prometheus monitoring/prometheus || true
          terraform import kubernetes_service.prometheus monitoring/prometheus || true

      - name: Terraform Plan
        working-directory: ./infrastructure
        run: terraform plan

      - name: Terraform Apply
        working-directory: ./infrastructure
        run: terraform apply -auto-approve

      # 5. Installation d'Ansible
      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible
 
      # 6. Configuration SSH avec gestion d'erreurs
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          chmod 600 ~/.ssh/config 

      # 7. Exécution du playbook Ansible
      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i ansible/inventory.ini ansible/deploy.yml --ssh-common-args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'

      # 8. Déploiement Kubernetes avec vérifications et délais
      - name: Check existing namespaces
        run: |
          kubectl get ns monitoring || kubectl create namespace monitoring
          kubectl get ns webgoat || kubectl create namespace webgoat
          sleep 10
 
      - name: Deploy Monitoring Stack
        run: |
          echo "Deploying Prometheus..."
          kubectl apply -f kubernetes/prometheus/ || true
          sleep 15
          
          echo "Deploying Grafana..."
          kubectl apply -f kubernetes/grafana/ || true
          sleep 15
          
          echo "Deploying resource quotas..."
          kubectl apply -f kubernetes/quotas.yaml || true
          sleep 10

      - name: Deploy WebGoat
        run: |
          echo "Deploying WebGoat..."
          kubectl apply -f kubernetes/deployment.yaml || true
          kubectl apply -f kubernetes/service.yaml || true
          sleep 15

          echo "Deploying Prometheus..."
          kubectl apply -f kubernetes/prometheus/ || true
          sleep 15
          
          echo "Deploying AlertManager..."
          kubectl apply -f kubernetes/alertmanager/ || true
          sleep 15
          
          echo "Deploying Grafana..."
          kubectl apply -f kubernetes/grafana/ || true
          sleep 15
          
          echo "Deploying resource quotas..."
          kubectl apply -f kubernetes/quotas.yaml || true
          sleep 10

      - name: Debug AlertManager DeploymenT
        run: |
          kubectl describe pod -l app=alertmanager -n monitoring
          kubectl logs -l app=alertmanager -n monitoring

      # 9. Vérification de l'état des pods avec timeout
      - name: Wait for Pods Readiness
        run: |
           timeout 300s bash -c '
            until kubectl wait --for=condition=ready pod -l app=prometheus -n monitoring --timeout=30s; do
              sleep 5
              echo "Waiting for Prometheus pods..."
            done
            until kubectl wait --for=condition=ready pod -l app=alertmanager -n monitoring --timeout=180s; do
              sleep 5
              echo "Waiting for AlertManager pods..."
            done
            until kubectl wait --for=condition=ready pod -l app=grafana -n monitoring --timeout=30s; do
              sleep 5
              echo "Waiting for Grafana pods..."
            done
            until kubectl wait --for=condition=ready pod -l app=webgoat -n webgoat --timeout=30s; do
              sleep 5
              echo "Waiting for WebGoat pods..."
            done
            '

      # 10. Affichage des URLs et vérification finale
      - name: Verify Deployment and Show Access URLs
        run: |
          echo "Verifying all services..."
          kubectl get pods -A
          kubectl get services -A
          
          echo "Access URLs:"
          echo "WebGoat: http://20.151.79.23:31051/WebGoat"
          echo "Prometheus: http://20.151.79.23:$(kubectl get svc -n monitoring prometheus -o jsonpath="{.spec.ports[0].nodePort}")"
          echo "Grafana: http://20.151.79.23:$(kubectl get svc -n monitoring grafana -o jsonpath="{.spec.ports[0].nodePort}")"
          echo "AlertManager: http://20.151.79.23:31093"
          echo "kube-state-metrics: http://20.151.79.23:31080/"
